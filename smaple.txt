
    // pages/chat.tsx

    'use client'

    import { NextPage } from "next";

    import Head from "next/head";

    import { Button } from "@/components/ui/button";

    import { ScrollArea } from "@/components/ui/scroll-area";

    import { Input } from "@/components/ui/input";



    import { Send } from "lucide-react";

    import { useState, useRef, useEffect } from "react";

    import ReactMarkdown from "react-markdown";



    type Message = {

    sender: "user" | "ai";

    text: string;

    };



    const ChatPage: NextPage = () => {

    const [messages, setMessages] = useState<Message[]>([]);

    const [input, setInput] = useState("");

    const [loading, setLoading] = useState(false);

    const scrollRef = useRef<HTMLDivElement>(null);



    const scrollToBottom = () => {

        scrollRef.current?.scrollIntoView({ behavior: "smooth" });

    };



    useEffect(() => {

        scrollToBottom();

    }, [messages]);



    const handleSend = async () => {

        if (!input.trim()) return;



        const userMsg: Message = { sender: "user", text: input };

        setMessages(prev => [...prev, userMsg]);

        setInput("");

        setLoading(true);



        try {

        const res = await fetch("/api/query", {

            method: "POST",

            headers: { "Content-Type": "application/json" },

            body: JSON.stringify({ query: input }),

        });

        const data = await res.json();

        const aiMsg: Message = {

            sender: "ai",

            text: data.finalAnswer || "No response",

        };

        setMessages(prev => [...prev, aiMsg]);

        } catch (err) {

        console.error(err);

        setMessages(prev => [...prev, { sender: "ai", text: "Error fetching response." }]);

        } finally {

        setLoading(false);

        }

    };



    return (

        <div className="flex flex-col h-screen bg-gray-50">

        <Head>

            <title>Flowa AI Chat</title>

        </Head>



        {/* Header */}

        <header className="bg-purple-700 text-white p-4 shadow-md">

            <h1 className="text-2xl font-bold">Flowa AI</h1>

            <p className="text-gray-200 mt-1">Your AI-powered assistant for code & content</p>

        </header>



        {/* Chat Area */}

        <main className="flex-1 flex flex-col p-4">

            <ScrollArea className="flex-1 border rounded-lg bg-gray-100 p-4 overflow-y-auto">

            {messages.map((msg, idx) => (

                <div

                key={idx}

                className={`flex mb-4 ${msg.sender === "user" ? "justify-end" : "justify-start"}`}

                >

                <div

                    className={`px-4 py-2 rounded-lg max-w-[70%] break-words ${

                    msg.sender === "user"

                        ? "bg-purple-600 text-white"

                        : "bg-white text-gray-800 shadow"

                    }`}

                >

                    <ReactMarkdown>{msg.text}</ReactMarkdown>

                </div>

                </div>

            ))}

            <div ref={scrollRef} />

            </ScrollArea>



            {/* Input Box */}

            <div className="flex mt-4 gap-2">

            <Input

                value={input}

                onChange={e => setInput(e.target.value)}

                onKeyDown={e => e.key === "Enter" && !e.shiftKey && handleSend()}

                placeholder="Type your message..."

                className="flex-1 bg-gray-200 focus:bg-gray-100"

            />

            <Button

                onClick={handleSend}

                disabled={loading}

                className="bg-purple-600 hover:bg-purple-700"

            >

                <Send className="w-5 h-5" />

            </Button>

            </div>



            {loading && (

            <div className="mt-2 text-gray-500 text-sm">AI is typing...</div>

            )}

        </main>



        {/* Footer */}

        <footer className="p-4 text-center text-gray-500 text-sm">

            Powered by Flowa AI

</footer>

        </div>

    );

    };



    export default ChatPage;